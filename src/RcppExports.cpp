// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cf_brownian
arma::mat cf_brownian(const int& d, const arma::colvec& t);
RcppExport SEXP _CFINI_cf_brownian(SEXP dSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_brownian(d, t));
    return rcpp_result_gen;
END_RCPP
}
// cf_stoch_solv
arma::mat cf_stoch_solv(const int& d1, const int& d2, const arma::colvec& X0, const Function& b, const Function& s, const arma::colvec& t);
RcppExport SEXP _CFINI_cf_stoch_solv(SEXP d1SEXP, SEXP d2SEXP, SEXP X0SEXP, SEXP bSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< const int& >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< const Function& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Function& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_stoch_solv(d1, d2, X0, b, s, t));
    return rcpp_result_gen;
END_RCPP
}
// cf_diff_solv_euls
List cf_diff_solv_euls(const double& alpha, const arma::colvec& I, const arma::colvec& A, const arma::colvec& B, const arma::colvec& t, const arma::colvec& x);
RcppExport SEXP _CFINI_cf_diff_solv_euls(SEXP alphaSEXP, SEXP ISEXP, SEXP ASEXP, SEXP BSEXP, SEXP tSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_diff_solv_euls(alpha, I, A, B, t, x));
    return rcpp_result_gen;
END_RCPP
}
// cf_diff_solv_cns
List cf_diff_solv_cns(const double& alpha, const double& theta, const arma::colvec& I, const arma::colvec& A, const arma::colvec& B, const arma::colvec& t, const arma::colvec& x);
RcppExport SEXP _CFINI_cf_diff_solv_cns(SEXP alphaSEXP, SEXP thetaSEXP, SEXP ISEXP, SEXP ASEXP, SEXP BSEXP, SEXP tSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_diff_solv_cns(alpha, theta, I, A, B, t, x));
    return rcpp_result_gen;
END_RCPP
}
// cf_black_scholes_solv_cns
List cf_black_scholes_solv_cns(const double& sigma, const double& rate, const double& theta, const arma::colvec& I, const arma::colvec& A, const arma::colvec& B, const arma::colvec& t, const arma::colvec& x);
RcppExport SEXP _CFINI_cf_black_scholes_solv_cns(SEXP sigmaSEXP, SEXP rateSEXP, SEXP thetaSEXP, SEXP ISEXP, SEXP ASEXP, SEXP BSEXP, SEXP tSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_black_scholes_solv_cns(sigma, rate, theta, I, A, B, t, x));
    return rcpp_result_gen;
END_RCPP
}
// cf_uniform_grid
arma::colvec cf_uniform_grid(const double& a, const double& b, const double& N);
RcppExport SEXP _CFINI_cf_uniform_grid(SEXP aSEXP, SEXP bSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_uniform_grid(a, b, N));
    return rcpp_result_gen;
END_RCPP
}
// cf_adapt_grid
arma::colvec cf_adapt_grid(const double& l, const double& a, const double& b, const double& N, const double& E);
RcppExport SEXP _CFINI_cf_adapt_grid(SEXP lSEXP, SEXP aSEXP, SEXP bSEXP, SEXP NSEXP, SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type E(ESEXP);
    rcpp_result_gen = Rcpp::wrap(cf_adapt_grid(l, a, b, N, E));
    return rcpp_result_gen;
END_RCPP
}
// cf_thiele_solv
List cf_thiele_solv(const arma::colvec& t, const arma::colvec& V0, const arma::mat& b, const arma::cube& B, const double& theta);
RcppExport SEXP _CFINI_cf_thiele_solv(SEXP tSEXP, SEXP V0SEXP, SEXP bSEXP, SEXP BSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_thiele_solv(t, V0, b, B, theta));
    return rcpp_result_gen;
END_RCPP
}
// cf_tri_diag_solv
void cf_tri_diag_solv(arma::colvec& a, arma::colvec& b, arma::colvec& c, arma::colvec& d);
RcppExport SEXP _CFINI_cf_tri_diag_solv(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type d(dSEXP);
    cf_tri_diag_solv(a, b, c, d);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CFINI_cf_brownian", (DL_FUNC) &_CFINI_cf_brownian, 2},
    {"_CFINI_cf_stoch_solv", (DL_FUNC) &_CFINI_cf_stoch_solv, 6},
    {"_CFINI_cf_diff_solv_euls", (DL_FUNC) &_CFINI_cf_diff_solv_euls, 6},
    {"_CFINI_cf_diff_solv_cns", (DL_FUNC) &_CFINI_cf_diff_solv_cns, 7},
    {"_CFINI_cf_black_scholes_solv_cns", (DL_FUNC) &_CFINI_cf_black_scholes_solv_cns, 8},
    {"_CFINI_cf_uniform_grid", (DL_FUNC) &_CFINI_cf_uniform_grid, 3},
    {"_CFINI_cf_adapt_grid", (DL_FUNC) &_CFINI_cf_adapt_grid, 5},
    {"_CFINI_cf_thiele_solv", (DL_FUNC) &_CFINI_cf_thiele_solv, 5},
    {"_CFINI_cf_tri_diag_solv", (DL_FUNC) &_CFINI_cf_tri_diag_solv, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CFINI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
