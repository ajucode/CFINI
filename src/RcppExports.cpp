// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// CFDiffSolvES
List CFDiffSolvES(const double& alpha, const arma::colvec& I, const arma::colvec& A, const arma::colvec& B, const arma::colvec& t, const arma::colvec& x);
RcppExport SEXP _CFINI_CFDiffSolvES(SEXP alphaSEXP, SEXP ISEXP, SEXP ASEXP, SEXP BSEXP, SEXP tSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CFDiffSolvES(alpha, I, A, B, t, x));
    return rcpp_result_gen;
END_RCPP
}
// CFDiffSolvCNS
List CFDiffSolvCNS(const double& alpha, const double& theta, const arma::colvec& I, const arma::colvec& A, const arma::colvec& B, const arma::colvec& t, const arma::colvec& x);
RcppExport SEXP _CFINI_CFDiffSolvCNS(SEXP alphaSEXP, SEXP thetaSEXP, SEXP ISEXP, SEXP ASEXP, SEXP BSEXP, SEXP tSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CFDiffSolvCNS(alpha, theta, I, A, B, t, x));
    return rcpp_result_gen;
END_RCPP
}
// GridUniform
arma::colvec GridUniform(const double& a, const double& b, const double& N);
RcppExport SEXP _CFINI_GridUniform(SEXP aSEXP, SEXP bSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(GridUniform(a, b, N));
    return rcpp_result_gen;
END_RCPP
}
// GridExpAddapt
arma::colvec GridExpAddapt(const double& l, const double& a, const double& b, const double& N, const double& E);
RcppExport SEXP _CFINI_GridExpAddapt(SEXP lSEXP, SEXP aSEXP, SEXP bSEXP, SEXP NSEXP, SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type E(ESEXP);
    rcpp_result_gen = Rcpp::wrap(GridExpAddapt(l, a, b, N, E));
    return rcpp_result_gen;
END_RCPP
}
// CFTriDiagSolv
void CFTriDiagSolv(arma::colvec& a, arma::colvec& b, arma::colvec& c, arma::colvec& d);
RcppExport SEXP _CFINI_CFTriDiagSolv(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type d(dSEXP);
    CFTriDiagSolv(a, b, c, d);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CFINI_CFDiffSolvES", (DL_FUNC) &_CFINI_CFDiffSolvES, 6},
    {"_CFINI_CFDiffSolvCNS", (DL_FUNC) &_CFINI_CFDiffSolvCNS, 7},
    {"_CFINI_GridUniform", (DL_FUNC) &_CFINI_GridUniform, 3},
    {"_CFINI_GridExpAddapt", (DL_FUNC) &_CFINI_GridExpAddapt, 5},
    {"_CFINI_CFTriDiagSolv", (DL_FUNC) &_CFINI_CFTriDiagSolv, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CFINI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
